// Auto-generated by avdl-compiler v1.3.1 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/gregor_ui.avdl

package keybase1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	gregor1 "github.com/keybase/gregor/protocol/gregor1"
	context "golang.org/x/net/context"
)

type PushMessagesArg struct {
	Messages []gregor1.Message `codec:"messages" json:"messages"`
}

type ReconnectedArg struct {
}

type GregorUIInterface interface {
	PushMessages(context.Context, []gregor1.Message) error
	Reconnected(context.Context) error
}

func GregorUIProtocol(i GregorUIInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.gregorUI",
		Methods: map[string]rpc.ServeHandlerDescription{
			"pushMessages": {
				MakeArg: func() interface{} {
					ret := make([]PushMessagesArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PushMessagesArg)
					if !ok {
						err = rpc.NewTypeError((*[]PushMessagesArg)(nil), args)
						return
					}
					err = i.PushMessages(ctx, (*typedArgs)[0].Messages)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"reconnected": {
				MakeArg: func() interface{} {
					ret := make([]ReconnectedArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					err = i.Reconnected(ctx)
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type GregorUIClient struct {
	Cli rpc.GenericClient
}

func (c GregorUIClient) PushMessages(ctx context.Context, messages []gregor1.Message) (err error) {
	__arg := PushMessagesArg{Messages: messages}
	err = c.Cli.Call(ctx, "keybase.1.gregorUI.pushMessages", []interface{}{__arg}, nil)
	return
}

func (c GregorUIClient) Reconnected(ctx context.Context) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.gregorUI.reconnected", []interface{}{ReconnectedArg{}})
	return
}
